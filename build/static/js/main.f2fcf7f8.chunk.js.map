{"version":3,"sources":["kindness.png","Home.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","useState","copied","visible","setvisible","users","setusers","className","src","kindness","alt","onClick","fetch","then","response","json","data","info","arr","emptyArray","length","r","Math","floor","random","indexOf","push","makeRandom","final","style","fontSize","color","fontStyle","type","height","width","map","user","index","id","firstName","lastName","location","context","accountName","accountNumber","bankName","About","href","App","to","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,sC,kNCoF5BC,MA9Ef,WAAiB,IAAD,EACYC,mBAAS,CAACC,QAAQ,IAD9B,gCAEgBD,oBAAS,IAFzB,mBAEPE,EAFO,KAEEC,EAFF,OAGYH,mBAAS,MAHrB,mBAGPI,EAHO,KAGAC,EAHA,KA4Bd,OAAGH,EAEC,yBAAKI,UAAU,OACb,yBAAKA,UAAU,YAAYC,IAAKC,IAAUC,IAAI,aAC9C,gDACA,4MAAiL,6BAAK,6BAAtL,qMACA,4BAAQH,UAAU,SAASI,QA7BjC,WACEC,MAFa,mFAGZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAKZ,SAAoBC,GAClB,IAAIC,EAAM,GACNC,EAAa,GACnB,KAAMD,EAAIE,OAAS,IAAG,CACpB,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWP,EAAKG,SACjB,IAApBF,EAAIO,QAAQJ,KACbH,EAAIQ,KAAKL,GACTF,EAAWO,KAAKT,EAAKI,KAI3B,OAAOF,EAhBWQ,CAAWX,MACxBH,MAAK,SAAAe,GAAK,OAAGtB,EAASsB,MACvBxB,GAAYD,KAwBR,eACA,4BAAQI,UAAU,kBAAlB,gBAKJ,6BACA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SACjB,wBAAIsB,MAAO,CAACC,SAAU,OAAQC,MAAO,UAArC,qBAEA,yIACE,wBAAIF,MAAO,CAACE,MAAM,OAAQC,UAAU,WAApC,iEAEF,6BACE3B,EAKI,KALG,kBAAC,IAAD,CAAQE,UAAU,SACtB0B,KAAK,eACLF,MAAM,UACNG,OAAQ,GACRC,MAAO,KAEX9B,GAAUA,EAAM+B,KAAK,SAACC,GAAD,OACpB,yBAAKC,MAAOD,EAAKE,GAAIhC,UAAU,YAC/B,wBAAIsB,MAAO,CAACC,SAAS,SAAS,8BAAOO,EAAKG,UAAZ,IAAwBH,EAAKI,UAA3D,KAA8EJ,EAAKK,SAAnF,KACA,6BACA,gCAAML,EAAKM,QAAX,KACA,iCACE,iCAAS,uDACRN,EAAKO,YAFR,IAEqB,6BAFrB,IAE2B,gCAASP,EAAKQ,eAFzC,IAEiE,6BAFjE,IAEwER,EAAKS,iBCvCpEC,EA1BD,WACV,OACI,yBAAKxC,UAAU,QACX,qDACA,2MACA,8MACA,0QACA,6BACA,8CACA,uTACA,6BACA,2CACA,qHACA,gIACA,uFAA4D,uBAAGyC,KAAK,kCAAR,QAA5D,sGACA,6BACA,sDACA,sHAA2F,uBAAGA,KAAK,kCAAR,QAA3F,+KACA,6BACA,4CACA,0GAA+E,uBAAGA,KAAK,mBAAR,QAA/E,kGCMGC,EAvBH,WACR,OACI,6BACA,kBAAC,IAAD,KACI,yBAAK1C,UAAU,QACf,kBAAC,IAAD,CAAMA,UAAU,OAAOgC,GAAG,OAAOW,GAAG,KAApC,QACA,kBAAC,IAAD,CAAM3C,UAAU,OAAO2C,GAAG,UAA1B,SACA,kBAAC,IAAD,CAAM3C,UAAU,OAAO2C,GAAG,UAA1B,UAGJ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,WCTQC,QACa,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZRC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2fcf7f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kindness.d6a67a89.png\";","import React, {useState} from 'react';\nimport Loader from 'react-loader-spinner'\nimport './App.css';\nimport kindness from './kindness.png';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction Home() {\n  const [state, setState] = useState({copied: false})\n  const [visible, setvisible] = useState(true)\n  const [users, setusers] = useState(null);\n  const apiURL = 'https://cors-anywhere.herokuapp.com/https://good-faith.herokuapp.com/api/people'\n  function fetchusers() {\n    fetch(apiURL)\n    .then(response => response.json())\n    .then(data => makeRandom(data))\n    .then(final =>setusers(final))\n    setvisible(!visible) //using this to manage the state of the results page\n  }\n\n  function makeRandom(info) {\n    var arr = [];\n    let emptyArray = []\n  while(arr.length < 10){\n    var r = Math.floor(Math.random() * info.length);\n    if(arr.indexOf(r) === -1) {\n      arr.push(r);\n      emptyArray.push(info[r])\n\n    }\n}\nreturn emptyArray\n\n  }\n\n  if(visible) {\n    return (\n      <div className=\"App\">\n        <img className=\"App-logo \" src={kindness} alt=\"kindness\"/>\n        <h1>Angels among us.</h1>\n        <h2>'Angels among us' is a simple tool for people with relatively secure financial statuses to help people whose means of livelihood have been affected by the COVID-19 outbreak.<br/><br/> When you click the 'Be an angel' button, we'll send you a random list of ten people you can contribute to. We suggest that you send money to each of the ten (eg. N2,000-N10,000 to each person)</h2>\n        <button className=\"Button\" onClick={fetchusers}>Be an angel</button>\n        <button className=\"Button Button2\">I need help</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n    <div className=\"header\">\n      <div className=\"Title\">\n    <h1 style={{fontSize: '25px', color: 'green'}}>Angels among us.</h1>\n    </div>\n    <h2>A list of people who have been economically affected by the COVID-19 virus and are currently without pay.</h2>\n      <h2 style={{color:'gray', fontStyle:'italic'}}>Here are ten randomly-generated individuals who you can help</h2>\n    </div>\n    <div>\n    {!users? <Loader className=\"Loader\"\n         type=\"BallTriangle\"\n         color=\"#008000\"\n         height={40}\n         width={40}\n      />: null}\n    {users &&  users.map ((user) => (\n      <div index={user.id} className=\"userCard\">\n      <h2 style={{fontSize:'15px'}}><span>{user.firstName} {user.lastName}</span> ({user.location})</h2>\n      <hr/>\n      <h3>\"{user.context}\"</h3>\n      <details>\n        <summary><span>Tap for account info</span></summary>\n        {user.accountName} <br/> <strong>{user.accountNumber}</strong> <br/> {user.bankName}\n      </details>\n      {/* <CopyToClipboard text={user.paymentLink}\n          onCopy={() => setState({copied: true})}>\n          <button>Tap to copy account details</button>\n        </CopyToClipboard>\n        {state.copied ? <span style={{color: 'blue', fontSize: '12px'}}>Copied!</span> : null}\n        <br/> */}\n      </div>\n    ))}\n    </div>\n    </div>\n  )\n \n}\n\nexport default Home;\n","import React from 'react'\nimport './App.css'\n\nconst About = () => {\n    return(\n        <div className=\"App2\">\n            <h1>What is this website?</h1>\n            <h2>'Angels among us' is a simple tool for people looking for ways to share some of their income with people who are in dire economic straits because of the COVID-19 pandemic.</h2>\n            <h2>It is a simple database of people who need help, randomly delivered to you ten at a time. You can then copy their account details and make a contribution to their well-being.</h2>\n            <h2>None of your payments pass through me in any form. You are helping these distressed people directly, without my having to play a middleman's role. I make no profit from this, and I do not collect commissions. I earn nothing from this.</h2>\n            <br/>\n            <h1>How do I help?</h1>\n            <h2>On the homepage, click the 'Be an angel' button to see a randomly-generated list of 10 people who need help from you. Please send the same amount of money to all of them. This is a great way to ensure that as many people as possible are uniformly reached by kind people like you.</h2>\n            <br/>\n            <h1>I need help</h1>\n            <h2>Click the 'I need help' button on the homepage and let people know just what you need</h2>\n            <h2>This is a good faith project: it works because honest people want to help honest people in need.</h2>\n            <h2>If your financial needs have been met, send me an email <a href=\"mailto:thevunderkind@gmail.com\">here</a> so I can take out your name. This is important so other people in need are likelier to be helped.</h2>\n            <br/>\n            <h1>Other forms of support</h1>\n            <h2>If you're a dev looking to add features to make this project better, shoot me an email <a href=\"mailto:thevunderkind@gmail.com\">here</a>. If you want to lend your support as a comms expert to handle social media and/other ways of reaching out to people who need help and donors alike, also send me an email!</h2>\n            <br/>\n            <h1>Who are you?</h1>\n            <h2>My name is Justin Irabor. Friends call me mogwai. I am a growth manager at <a href=\"ouredenlife.com\">Eden</a>. I am also a writer, illustrator, animator and software engineer. I live and work in Lagos.</h2>\n\n        </div>\n    )\n}\n\nexport default About","import React from 'react'\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\nimport Home from './Home'\nimport About from './About'\nimport './App.css'\n\nconst App = () => {\n    return (\n        <div>\n        <Router>\n            <div className=\"Linq\">\n            <Link className=\"Link\" id=\"home\" to='/'>Home</Link>\n            <Link className=\"Link\" to='/about'>About</Link>\n            <Link className=\"Link\" to=\"/users\">Users</Link>\n            </div>\n\n        <Switch>\n        <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n        </Router>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}